# updating_panel.py
import tkinter as tk
from tkinter import font as tkfont
import time

def hex_to_rgb(h):
    h = h.lstrip('#')
    return tuple(int(h[i:i+2], 16) for i in (0, 2, 4))

def rgb_to_hex(rgb):
    return '#{:02x}{:02x}{:02x}'.format(*rgb)

def brighten(hexcolor, factor):
    r, g, b = hex_to_rgb(hexcolor)
    r = min(255, int(r * factor))
    g = min(255, int(g * factor))
    b = min(255, int(b * factor))
    return rgb_to_hex((r, g, b))

# draw rounded rectangle on canvas
def rounded_rect(canvas, x1, y1, x2, y2, r=20, **kwargs):
    # corners
    canvas.create_arc(x1, y1, x1+2*r, y1+2*r, start=90, extent=90, style='pieslice', **kwargs)
    canvas.create_arc(x2-2*r, y1, x2, y1+2*r, start=0, extent=90, style='pieslice', **kwargs)
    canvas.create_arc(x2-2*r, y2-2*r, x2, y2, start=270, extent=90, style='pieslice', **kwargs)
    canvas.create_arc(x1, y2-2*r, x1+2*r, y2, start=180, extent=90, style='pieslice', **kwargs)
    # edges
    canvas.create_rectangle(x1+r, y1, x2-r, y2, **kwargs)
    canvas.create_rectangle(x1, y1+r, x2, y2-r, **kwargs)

class UpdatingPanel:
    def __init__(self, root):
        self.root = root
        self.root.title("Update")
        self.root.resizable(False, False)

        # center the window
        w, h = 520, 300
        ws = root.winfo_screenwidth()
        hs = root.winfo_screenheight()
        x = (ws // 2) - (w // 2)
        y = (hs // 2) - (h // 2)
        root.geometry(f"{w}x{h}+{x}+{y}")

        # overall bg
        bg = "#eaf4ff"
        root.configure(bg=bg)

        # canvas to draw a rounded panel
        self.canvas = tk.Canvas(root, width=w, height=h, highlightthickness=0, bg=bg)
        self.canvas.pack(fill="both", expand=True)

        # panel colors
        self.base_color = "#1976d2"      # primary blue
        self.panel_color = "#1e88e5"     # panel slightly lighter
        self.panel_id = None

        # draw panel (rounded rect)
        padding = 30
        self.panel_coords = (padding, padding, w - padding, h - padding)
        rounded_rect(self.canvas, *self.panel_coords, r=20, fill=self.panel_color, outline="")

        # shadow (soft simple effect)
        # a slightly darker strip at bottom
        self.canvas.create_rectangle(padding+8, h - padding - 8, w - padding-8, h - padding, fill=brighten(self.panel_color, 0.85), outline="")

        # fonts
        self.title_font = tkfont.Font(family="Segoe UI", size=20, weight="bold")
        self.msg_font = tkfont.Font(family="Segoe UI", size=14)
        self.small_font = tkfont.Font(family="Segoe UI", size=11)

        # add texts (centered)
        cx = w // 2
        cy = h // 2 - 10
        self.title_text_id = self.canvas.create_text(cx, cy-30, text="We're sorry", font=self.title_font, fill="white")
        self.msg_text_id = self.canvas.create_text(cx, cy+0, text="We are currently updating", font=self.msg_font, fill="white")
        self.dots_text_id = self.canvas.create_text(cx, cy+40, text="", font=self.small_font, fill="#dbeeff")

        # optional small note
        self.note_id = self.canvas.create_text(cx, h - padding - 18, text="Thank you for your patience.", font=self.small_font, fill="#dbeeff")

        # animation state
        self.dot_count = 0
        self.pulse_direction = 1
        self.pulse_factor = 1.0

        # start animations
        self.animate_dots()
        self.animate_pulse()

        # close on Escape
        root.bind("<Escape>", lambda e: root.destroy())

    def animate_dots(self):
        # animate ... after text
        self.dot_count = (self.dot_count + 1) % 4  # 0..3
        dots = "." * self.dot_count
        self.canvas.itemconfigure(self.dots_text_id, text="Updating" + dots)
        self.root.after(500, self.animate_dots)

    def animate_pulse(self):
        # gentle pulse of panel color
        # vary pulse_factor between 0.95 and 1.05
        if self.pulse_direction == 1:
            self.pulse_factor += 0.01
            if self.pulse_factor > 1.05:
                self.pulse_direction = -1
        else:
            self.pulse_factor -= 0.01
            if self.pulse_factor < 0.95:
                self.pulse_direction = 1

        new_color = brighten(self.panel_color, self.pulse_factor)
        # redraw rounded rect by creating a new one and deleting the old
        # (simpler than trying to change fill of complex items)
        # remove all panel-shaped items (we know approximate order)
        # For simplicity, just clear and redraw everything dependent on panel
        self.canvas.delete("panel")  # we'll tag the new shapes with "panel"
        x1, y1, x2, y2 = self.panel_coords
        # new rounded rect with tag
        rounded_rect(self.canvas, x1, y1, x2, y2, r=20, fill=new_color, outline="", )
        # re-create the shadow rectangle and tag it too
        self.canvas.create_rectangle(x1+8, y2-8, x2-8, y2-8+8, fill=brighten(new_color, 0.85), outline="", tags=("panel",))
        # re-place text on top (texts were not deleted, but ensure they are above)
        self.canvas.tag_raise(self.title_text_id)
        self.canvas.tag_raise(self.msg_text_id)
        self.canvas.tag_raise(self.dots_text_id)
        self.canvas.tag_raise(self.note_id)

        self.root.after(40, self.animate_pulse)

if __name__ == "__main__":
    root = tk.Tk()
    app = UpdatingPanel(root)
    root.mainloop()
